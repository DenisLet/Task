1) пополнения (успех + отклонение) -> test_payment.py
2) выплаты (успех + отклонение)    -> test_payout.py (не совсем понял как получить позитивный результат, без платежных данных)
3) возврата, частичный вовзрат     -> test_refund.py (не нашел про частичный возврат)
4) использовать параметр callbackurl, принять нотификацию/колбек -> callback_server.py + callback_payment.py
5) итоговый баланс -> test_balance.py
6) запросить информацию по order_number по любым 2 транзакциям и сохранить ответ -> oreder_number_request.py 


- Если есть опыт автоматизации, то написать автоматизацию проверки любых 2х пунктов выше - пункты 1,2,3,5 -> test_all_methods.py + /.github/workflow/test.yml
- Все транзакции должны должны получить финальный статус. (в качестве assert брал параметр 'success' True | False,  статусы  "init, pending, approved,declined' печатаются при выполнении теста)
- По каждой транзакции предоставить токен.(транзакций много с тестами получилось , токены печатаются во время выполнения тестов 'token': 'x1oeScg3PfTBzWQ979KMYPPqBbyoUSoN', 'token': 'JDA4qPD7qFUvKMmr44uP7EcrrBBDKuja' и тд)  
- 4 пункт, придумать куда принять нотификации, данные нотификации сохранить ->  Чтобы принимать и обрабатывать уведомления (callback) , потребуется создать обработчик HTTP-сервер(на Flask), который будет слушать входящие POST-запросы на указанном URL и сохранять данные уведомлений в базу данных (SQLite3).
- - Для запросов по пункту 5 и 6 предоставить запрос/ответ (curl, postman, etc...) -> balance_request.json, request1.txt, request2.txt
